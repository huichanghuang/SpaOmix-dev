import os
import gzip
import argparse
import pandas as pd
from space_sketcher.tools.utils import csv2dict, add_log
"""
This function assign coordinate to each spatial barcode 
"""

def readlines(_file):
    lines = set()
    if _file.endswith(".gz"):
        with gzip.open(_file, "rt") as f:
            for line in f:
                line = line.strip().split()
                lines.add(line[0])
    else:
        with open(_file, "rt") as f:
            for line in f:
                line = line.strip().split()
                lines.add(line[0])        
    return lines

@add_log
def assign_coordinate(coordfile, sb_umis, true_cbs, summaryfile, sbwlfile, outdir):
   
    true_cells = readlines(true_cbs)
    #structure of cell barcode in leader_v1 RNA matrix: AAAAAAAAAA_BBBBBBBBBB, must remove the "_"
    true_cells = list(map(lambda x: x.replace("_", ""), true_cells))
    
    ###extract spatial barcode for those calling cell barcodes
    df_umis = pd.read_csv(f"{sb_umis}", compression="gzip")
    truecell_umis = df_umis[df_umis["Cell_Barcode"].isin(true_cells)]
    ###spatial barcode截取, 为了匹配puckfile中的barcode
    truecell_umis["SUB_SB"] = df_umis["Spatial_Barcode"].str[:10]+df_umis["Spatial_Barcode"].str[12:18]

    ###summary statistic
    summary = csv2dict(summaryfile)
    summary["Valid_Spatial_Reads_in_cell"] = truecell_umis["Read_Count"].sum()
    summary["Total_Spatial_UMIs_in_cell"] = len(truecell_umis)
    summary["Total_Spatial_UMIs_in_cell_ratio"] = round(len(truecell_umis)/len(df_umis), 3)
    summary["Spatial_Barcode_Saturation_in_cell"] = round(1-(summary["Total_Spatial_UMIs_in_cell"]/summary["Valid_Spatial_Reads_in_cell"]),3)

    coordf = pd.read_csv(coordfile, header=0)
    coordf.columns = ["SUB_SB", "x", "y"]
    summary["Total_puck_spatial_barcodes"] = len(coordf)
    
    sbwhitelist = readlines(sbwlfile)
    sbwhitelist_modified = list(map(lambda x: x[:10]+x[12:18], sbwhitelist))
    filtered_coordf = coordf[coordf["SUB_SB"].isin(sbwhitelist_modified)]
    summary["Puck_spatial_barcodes_in_whitelist"] = len(filtered_coordf)
    summary["Puck_spatial_barcodes_in_whitelist_rate"] = round(len(filtered_coordf)/len(coordf), 3)

    filtered_coordf_dedup = filtered_coordf.drop_duplicates(subset='SUB_SB') ##根据Spatial_Barcode去重
    summary["Unique_puck_spatial_barcodes_in_whitelist"] = len(filtered_coordf_dedup)
    summary["Unique_puck_spatial_barcodes_in_whitelist_rate"] = round(len(filtered_coordf_dedup)/len(coordf), 3)

    ###merge coordfile and sb_umis
    summary["Total Reads in cell calling"] = truecell_umis["Read_Count"].sum()
    mergedf = pd.merge(truecell_umis, filtered_coordf_dedup, on="SUB_SB", how="inner")
    summary["Reads in with spatial barcode in puck"] = mergedf["Read_Count"].sum()
    summary["Reads in with spatial barcode in puck rate"] = round(mergedf["Read_Count"].sum()/truecell_umis["Read_Count"].sum(), 3)

    mergedf_dropped = mergedf.drop("Read_Count", axis=1)
    mergedf_dropped["UMI_count"] = mergedf_dropped.groupby(['Cell_Barcode', 'SUB_SB'])['UMI'].transform('nunique')
    df_sorted = mergedf_dropped.sort_values(by=['Cell_Barcode', 'UMI_count'], ascending=[True, False])
    df_sorted = df_sorted.drop("UMI", axis=1)
    df_sorted_dedup = df_sorted.drop_duplicates()
    df_sorted_dedup.columns = ["cb", "sb", "subsb", "xcoord", "ycoord", "umi_count"]

    outfile = os.path.join(outdir, "cb_sb_coord.txt")
    df_sorted_dedup.to_csv(outfile, index=False, header=True, sep="\t")

    outsummary = os.path.join(outdir, "sb_umis_summary.temp.csv")
    with open(outsummary, "wt") as outf:
        for k, v in summary.items():
            print(f"{k},{v}", file=outf)
    

def parse_args():
    parser = argparse.ArgumentParser(description='Assign coordinate to each spatial barcode.')
    parser.add_argument('-c', '--coordfile', 
        metavar='FILE', 
        type=str,
        help='The coordinate file, in which each spatial barcode with a exact x,y coordinate.'
        )
    parser.add_argument('-i', '--infile', 
        metavar='FILE', 
        type=str,
        help='Input file generated by spatial_barcode_extraction, contain Cell_Barcode,UMI,Spatial_Barcode,Read_Count.'
        )
    parser.add_argument('-sm', '--summary', 
        metavar='FILE', 
        type=str,
        help='Temporary summary file generated by spatial_barcode_extraction.'
        )
    parser.add_argument('-sb', '--spatialbarcode', 
        metavar='FILE', 
        type=str,
        help='The spatial barcode whitelist files.'
        )
    parser.add_argument('-tc', '--truecells', 
        metavar='FILE', 
        type=str,
        help='The filtered cell barcode files generated by STARsolo mapping.'
        )
    parser.add_argument('-o', '--outdir', 
        metavar='PATH', 
        type=str,
        help='The output directory'
        )
    

if __name__=='__main__':
    args = parse_args()

    assign_coordinate(args.coordfile, args.infile, args.truecells, 
                      args.summary, args.spatialbarcode, args.outdir)